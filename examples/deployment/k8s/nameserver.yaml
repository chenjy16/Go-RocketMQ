# Go-RocketMQ NameServer Kubernetes部署配置

---
# ConfigMap for NameServer configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nameserver-config
  namespace: rocketmq
  labels:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver
    app.kubernetes.io/part-of: go-rocketmq
data:
  nameserver.conf: |
    # NameServer配置文件
    listenPort=9876
    logLevel=INFO
    logFile=/var/log/rocketmq/nameserver.log
    routeInfoCleanInterval=10
    brokerHeartbeatTimeout=120

---
# Service for NameServer
apiVersion: v1
kind: Service
metadata:
  name: nameserver-service
  namespace: rocketmq
  labels:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver
    app.kubernetes.io/part-of: go-rocketmq
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
spec:
  type: ClusterIP
  ports:
    - name: nameserver
      port: 9876
      targetPort: 9876
      protocol: TCP
  selector:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: nameserver-headless
  namespace: rocketmq
  labels:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver
    app.kubernetes.io/part-of: go-rocketmq
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: nameserver
      port: 9876
      targetPort: 9876
      protocol: TCP
  selector:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver

---
# StatefulSet for NameServer
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nameserver
  namespace: rocketmq
  labels:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver
    app.kubernetes.io/part-of: go-rocketmq
    app.kubernetes.io/version: "1.0.0"
spec:
  serviceName: nameserver-headless
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: go-rocketmq
      app.kubernetes.io/component: nameserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: go-rocketmq
        app.kubernetes.io/component: nameserver
        app.kubernetes.io/part-of: go-rocketmq
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rocketmq-serviceaccount
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: nameserver
          image: go-rocketmq:1.0.0
          imagePullPolicy: IfNotPresent
          command: ["/app/scripts/start.sh"]
          args: ["nameserver"]
          ports:
            - name: nameserver
              containerPort: 9876
              protocol: TCP
            - name: metrics
              containerPort: 8080
              protocol: TCP
          env:
            - name: ROCKETMQ_NAMESERVER_PORT
              value: "9876"
            - name: ROCKETMQ_LOG_LEVEL
              value: "INFO"
            - name: ROCKETMQ_ROUTE_INFO_CLEAN_INTERVAL
              value: "10"
            - name: ROCKETMQ_BROKER_HEARTBEAT_TIMEOUT
              value: "120"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: config
              mountPath: /etc/rocketmq
              readOnly: true
            - name: logs
              mountPath: /var/log/rocketmq
            - name: data
              mountPath: /data/rocketmq
          livenessProbe:
            tcpSocket:
              port: 9876
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 9876
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            tcpSocket:
              port: 9876
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 12
      volumes:
        - name: config
          configMap:
            name: nameserver-config
            defaultMode: 0644
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/component
                      operator: In
                      values: ["nameserver"]
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
  volumeClaimTemplates:
    - metadata:
        name: logs
        labels:
          app.kubernetes.io/name: go-rocketmq
          app.kubernetes.io/component: nameserver
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "fast-ssd"
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: go-rocketmq
          app.kubernetes.io/component: nameserver
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "fast-ssd"
        resources:
          requests:
            storage: 20Gi
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0

---
# PodDisruptionBudget for NameServer
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nameserver-pdb
  namespace: rocketmq
  labels:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver
    app.kubernetes.io/part-of: go-rocketmq
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: go-rocketmq
      app.kubernetes.io/component: nameserver

---
# HorizontalPodAutoscaler for NameServer
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nameserver-hpa
  namespace: rocketmq
  labels:
    app.kubernetes.io/name: go-rocketmq
    app.kubernetes.io/component: nameserver
    app.kubernetes.io/part-of: go-rocketmq
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: nameserver
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max